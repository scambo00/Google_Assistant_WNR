[
  {
    "id": "527a83c4.63644c",
    "type": "comment",
    "z": "29f5b0b3.69268",
    "name": "Google Home Webhook-API.AI ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 730.8957672119141,
    "y": 251.8888931274414,
    "wires": []
  },
  {
    "id": "1f930c13.00e0d4",
    "type": "http in",
    "z": "29f5b0b3.69268",
    "name": "",
    "url": "/red/googleActions",
    "method": "post",
    "swaggerDoc": "",
    "x": 143,
    "y": 355.1110610961914,
    "wires": [
      [
        "73587ca5.1c0ac4",
        "d0f8f543.a8ab88"
      ]
    ]
  },
  {
    "id": "64307756.7c97e8",
    "type": "http response",
    "z": "29f5b0b3.69268",
    "name": "",
    "x": 772.0000610351562,
    "y": 302.11109161376953,
    "wires": []
  },
  {
    "id": "8e240f98.c0155",
    "type": "function",
    "z": "29f5b0b3.69268",
    "name": "Process Request",
    "func": "var WinkCMDmsg = \"\";\nvar localMsg = \"\";\nvar speechVar = \"unknown\";\nvar result = msg.payload.result;\nvar action = result.action;\n//var action = inputs.intent;\nvar parameters = result.parameters;\nvar cmd = parameters.command;\nvar winkName = parameters.winkName;\nvar winkRobot = parameters.winkRobot;\nvar robotCmd = parameters.robotCmd;\nvar globVarName = parameters.globVarName;\nvar type = \"\";\nvar level = parameters.level;\nvar winkData = context.global.winkState;\nvar eid;\nvar new_entries;\n\nvar welcome = [\n        \"Hi, can I help you today?\",\n        \"Hello, something I can help you with?\",\n        \"Greetings!, can i be of some help today?\",\n        \"Good Day!, what can i help you with?\",\n        \"How can I help you today?\",\n        \"Is there something I can help you with?\"\n    ];\n\nvar WNRcmd = [\n        \"The command \" +winkName + \" \" + cmd + \" has been executed\",\n        winkName + \" \" + cmd + \" processed\",\n        winkName +\" is now \" +cmd\n    ];\n    \nvar VARcmd = [\n        \"The command \" +globVarName + \" \" + cmd + \" has been executed\",\n        globVarName + \" \" + cmd + \" processed\",\n        globVarName +\" is now \" +cmd\n    ];\n\n//return an array of objects according to key matching\nfunction getTypeByName(obj, query) {\n    for (var key in obj) {\n        var value = obj[key];\n        for(var winkname in value){\n            if (winkname == query) {\n                //node.warn('type=' + key);\n                return (key);\n            }\n        }\n    }\n}\n\nfunction getWinkDevices(obj){\n    var array = [];\n        for (var device in obj){\n            var name=obj[device];\n            var str = JSON.stringify(name.name);\n            if ( !(str.includes(\"@\",0)) && !(str.includes(\".\",0)) )\n                array.push({\"value\":name.name});\n        }\n    return array;\n}\n\nvar web_req=false;\nif (msg.req.headers['authorization']==context.global.googleHomeKey) web_req=true;\nif (web_req){\n    \n    switch(action)\n    {\n        case \"WNRcmd\":\n            type = getTypeByName(winkData,winkName);\n            //node.warn(type);\n            switch(type)\n            {\n                case \"binary_switches\":\n                case \"light_bulbs\":\n                    type = \"light\";\n                    break;\n                case \"groups\":\n                    type = \"group\";\n                    break;  \n                case \"scenes\":\n                    type = \"shortcut\";\n                    break;\n                default:\n                    type = \"undefined\";\n                break;\n            }\n            \n            if (type === \"undefined\"){\n                speechVar = winkName +\" is not a defined Device in your list\";\n            }\n            else{\n                if (level === \"\"){               \n                    level = 100;\n                    speechVar = WNRcmd[Math.floor((Math.random() * WNRcmd.length) + 0)];\n                }\n                else{\n                    cmd = \"on\";\n                    speechVar = WNRcmd[Math.floor((Math.random() * WNRcmd.length) + 0)];\n                    speechVar = speechVar + \" at brightness of \" +level;\n                }\n                WinkCMDmsg = context.global.executeWinkCMD(winkName,type,cmd,level);\n            }\n            break;\n            \n        case \"sendVarCmd\":\n            \n            global.set(globVarName,cmd);\n\n            //node.warn(globVarName + \" turned \" + cmd);\n            speechVar = VARcmd[Math.floor((Math.random() * VARcmd.length) + 0)];\n            WinkCMDmsg=context.global.send_ui_note('information',30000,'Variable '+globVarName+' set to: '+cmd,null);\n            WinkCMDmsg.topic=globVarName;\n            WinkCMDmsg.var_val=cmd;   \n            break;\n \n        case \"updateWinkDevices\":\n            eid = getWinkDevices(context.global.winkState.light_bulbs);\n            eid = eid.concat(getWinkDevices(context.global.winkState.binary_switches));\n            eid = eid.concat(getWinkDevices(context.global.winkState.groups));\n            //what other devices need to be added here?\n            \n            //Find values that are in context.global.googleHomeWinkDevices but not in eid\n            new_entries = eid.filter(function(obj) {\n                return !context.global.googleHomeWinkDevices.some(function(obj2) {\n                    return obj.value == obj2.value;\n                });\n            });\n            speechVar = new_entries.length +\" new devices were retrieved,  Is there anything else I can do for you?\";\n            WinkCMDmsg ={\n                \"url\":\"https://api.api.ai/v1/entities/winkName/entries?v=20150910\",\n                \"method\": \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\":\"Bearer \"+context.global.googleHomeKey\n                },\n                payload: \n                    new_entries\n            };\n            break;\n\n        case \"input.welcome\":\n        case \"assistant.intent.action.MAIN\":\n            speechVar = welcome[Math.floor((Math.random() * welcome.length) + 1)];\n            break;\n            \n        case \"updateGlbVars\":\n            speechVar = \"This action is not supported yet\";\n            break;\n\n        case \"goodNight\":\n            speechVar = \"This action is not supported yet\";\n            break;\n            \n        case \"comfortZone\":\n            speechVar = \"This action is used for testing\";\n            break;\n            \n        default:\n            speechVar = \"Unknown action\";\n            break;\n    }//end switch(action)\n}\n//web request denided\nelse {\n    node.warn(\"Google Home messages bad request\");\n    msg.statusCode=403;\n    return [msg,null];\n}\n\n//message returned to ai.api\n//this always needs to be returned\nmsg.headers = {\n        \"Content-type\" : \"application/json\",\n        \"my-custom-header\": \"a value\"\n    };\nmsg.statusCode=200; \nmsg.payload= {\n    \"speech\": speechVar,\n    \"displayText\": \"display text\",\n    \"data\": {\"WNR\": action},\n    \"contextOut\": [],\n    \"source\": \"WinkNodeRed\"\n    };\n\n\nif (WinkCMDmsg!==\"\")\n{\n    return [msg,WinkCMDmsg];\n}\n\nelse\n{\n    return [msg,null];\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 593.0000152587891,
    "y": 342.11109161376953,
    "wires": [
      [
        "64307756.7c97e8",
        "d3afe541.f803e8"
      ],
      [
        "29e5ce27.f53c22"
      ]
    ]
  },
  {
    "id": "5c380199.e885e",
    "type": "http request",
    "z": "29f5b0b3.69268",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "tls": "",
    "x": 1099.0000610351562,
    "y": 349.11109161376953,
    "wires": [
      [
        "21af3bb6.1d9e14",
        "a574a52c.3cc838"
      ]
    ]
  },
  {
    "id": "27cb06d2.a61d1a",
    "type": "delay",
    "z": "29f5b0b3.69268",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 932.0000610351562,
    "y": 349.11109161376953,
    "wires": [
      [
        "5c380199.e885e"
      ]
    ]
  },
  {
    "id": "21af3bb6.1d9e14",
    "type": "debug",
    "z": "29f5b0b3.69268",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 1277.0000915527344,
    "y": 308.11109161376953,
    "wires": []
  },
  {
    "id": "29e5ce27.f53c22",
    "type": "function",
    "z": "29f5b0b3.69268",
    "name": "",
    "func": "var t=msg.topic;\nnode.send(msg);\nif ('topic' in msg){\n    var wsMsg={};\n    wsMsg.payload={\n        varName:t,\n        varVal:context.global[t]\n    }\n    wsMsg.method=\"POST\";\n    wsMsg.url=context.global.BlueMixUrlBase+'/red/wscomms';\n    wsMsg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    };    \n    node.send(wsMsg);\n    \n    if (t=='VacationMode' && context.global.VacationMode=='on'){\n        var Msg1={}\n        Msg1.method=\"POST\";\n        Msg1.url=context.global.BlueMixUrlBase+'/red/vacation_init';\n        Msg1.headers= {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        };\n        context.global.sendWithTimeout(node,Msg1,4000);\n    }\n    if (t=='VacationMode' && context.global.VacationMode=='off') context.global.clearAllIntervals();\n\n} \nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 772.0000610351562,
    "y": 349.11109161376953,
    "wires": [
      [
        "27cb06d2.a61d1a",
        "d9d6290d.41c4c8"
      ]
    ]
  },
  {
    "id": "a574a52c.3cc838",
    "type": "function",
    "z": "29f5b0b3.69268",
    "name": "",
    "func": "if ('topic' in msg){\nvar msg1={}\nmsg1.url=context.global.BlueMixUrlBase+'/red/update_app_cfg';\nmsg1.method=\"POST\";\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\nmsg1.payload={\n   db_mode:\"update\"\n}\nreturn msg1;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 1257.0001068115234,
    "y": 349.11109161376953,
    "wires": [
      [
        "15e1cf0.47a9031"
      ]
    ]
  },
  {
    "id": "15e1cf0.47a9031",
    "type": "http request",
    "z": "29f5b0b3.69268",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1407.0001068115234,
    "y": 349.11109161376953,
    "wires": [
      []
    ]
  },
  {
    "id": "d9d6290d.41c4c8",
    "type": "debug",
    "z": "29f5b0b3.69268",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 935.90283203125,
    "y": 304.44458770751953,
    "wires": []
  },
  {
    "id": "36dae03e.3b012",
    "type": "function",
    "z": "29f5b0b3.69268",
    "name": "",
    "func": "var msg ={\n    \"url\":\"https://api.api.ai/v1/entities/winkName\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.googleHomeKey,\n        }\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 614.7326812744141,
    "y": 418.50000762939453,
    "wires": [
      [
        "10703275.7cbbce"
      ]
    ]
  },
  {
    "id": "10703275.7cbbce",
    "type": "http request",
    "z": "29f5b0b3.69268",
    "name": "Google Home wink_devices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "tls": "",
    "x": 807.7917327880859,
    "y": 418.22217559814453,
    "wires": [
      [
        "8723b2cd.27299"
      ]
    ]
  },
  {
    "id": "8723b2cd.27299",
    "type": "function",
    "z": "29f5b0b3.69268",
    "name": "googleHomeWinkDevices",
    "func": "function getEntries(obj,search){\n    for (var i in obj){\n        var entries=obj[i];\n        if (i == search){\n            return(entries);\n        }\n    }\n}\n\ncontext.global.googleHomeWinkDevices = getEntries(msg.payload,\"entries\");\n//node.warn(context.global.googleHomeWinkDevices);\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1066.791732788086,
    "y": 418.22217559814453,
    "wires": [
      [
        "df7011c4.687b8"
      ]
    ]
  },
  {
    "id": "b00e1f77.67e04",
    "type": "inject",
    "z": "29f5b0b3.69268",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "43200",
    "crontab": "",
    "once": true,
    "x": 414.7361297607422,
    "y": 417.57642364501953,
    "wires": [
      [
        "36dae03e.3b012"
      ]
    ]
  },
  {
    "id": "df7011c4.687b8",
    "type": "debug",
    "z": "29f5b0b3.69268",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 1268.7918548583984,
    "y": 418.55567169189453,
    "wires": []
  },
  {
    "id": "d3afe541.f803e8",
    "type": "debug",
    "z": "29f5b0b3.69268",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 588.5694427490234,
    "y": 301.33325958251953,
    "wires": []
  },
  {
    "id": "72323902.8345d8",
    "type": "inject",
    "z": "29f5b0b3.69268",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 560.8299713134766,
    "y": 142.2465362548828,
    "wires": [
      [
        "e627e270.359a3"
      ]
    ]
  },
  {
    "id": "e627e270.359a3",
    "type": "function",
    "z": "29f5b0b3.69268",
    "name": "Define Globals",
    "func": "\ncontext.global.googleHomeKey=\"dd8b6d172c5e45e3a6ed7aa88f80cf26\";\n\nif (typeof(context.global.googleHomeWinkDevices) === 'undefined')\n{\n    context.global.googleHomeWinkDevices = [];  \n}\n\nif (typeof(context.global.googleHomeGlbVariables) === 'undefined')\n{\n    context.global.googleHomeGlbVariables = [];  \n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 772.8333892822266,
    "y": 142.6215362548828,
    "wires": [
      []
    ]
  },
  {
    "id": "312cfbce.d43104",
    "type": "comment",
    "z": "29f5b0b3.69268",
    "name": "request API.AI for wink_devices entity",
    "info": "",
    "x": 835.0591278076172,
    "y": 460.83329010009766,
    "wires": []
  },
  {
    "id": "73587ca5.1c0ac4",
    "type": "debug",
    "z": "29f5b0b3.69268",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 320.89573669433594,
    "y": 279.8888854980469,
    "wires": []
  },
  {
    "id": "d0f8f543.a8ab88",
    "type": "switch",
    "z": "29f5b0b3.69268",
    "name": "Switch Action",
    "property": "payload.result.action",
    "propertyType": "msg",
    "rules": [
      {
        "t": "else"
      },
      {
        "t": "eq",
        "v": "input.welcome",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "updateWinkDevices",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 377.83677673339844,
    "y": 354.95499420166016,
    "wires": [
      [
        "8e240f98.c0155"
      ],
      [
        "36dae03e.3b012"
      ],
      [
        "36dae03e.3b012"
      ]
    ]
  }
]